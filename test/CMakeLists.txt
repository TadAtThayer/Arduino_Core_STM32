# This file was autogenerated by:
# ~/Code/Arduino_Core_STM32/cmake/scripts/cmake_easy_setup.py
# Use it in your CMake configuration by `include()`'ing it.
# You can also copy it in your sketch's folder and edit it to fit your project.

cmake_minimum_required(VERSION 3.21)

# STEP 1: set up bases of environment
# -----------------------------------------------------------------------------

file(REAL_PATH "~/Code/Arduino_Core_STM32" CORE_PATH EXPAND_TILDE)
file(TO_CMAKE_PATH "${CORE_PATH}" CORE_PATH)

file(REAL_PATH "~/Documents/Arduino/libraries" USER_LIBS EXPAND_TILDE)
file(TO_CMAKE_PATH "${USER_LIBS}" USER_LIBS)

set(BOARDNAME "NUCLEO_C031C6")

list(APPEND CMAKE_MODULE_PATH ${CORE_PATH}/cmake)
set(CMAKE_TOOLCHAIN_FILE toolchain)


# This block can be removed when using this file as the sketch's CMakeLists.txt
if (NOT ${CMAKE_PARENT_LIST_FILE} STREQUAL ${CMAKE_CURRENT_LIST_FILE})
    # When imported from the main CMakeLists.txt, it should stop here
    # not to interfere with the true build config.
    return()
endif()

project("test_project")

# STEP 2: configure the build
# -----------------------------------------------------------------------------

# Uncomment and pick the relevant value for each keyword!
# The first value listed is the default (when the feature is supported by the board)
# This means that leaving everything commented out yields the default config
include(set_board)
set_board("${BOARDNAME}"
  # SERIAL generic / disabled / none
  # USB none / CDCgen / CDC / HID
  # XUSB FS / HS / HSFS
  # VIRTIO disable / generic / enabled
  # BOOTLOADER dfuo / dfu2 / hid
)

include(overall_settings)
overall_settings(
  # STANDARD_LIBC
  # PRINTF_FLOAT
  # SCANF_FLOAT
  # DEBUG_SYMBOLS
  # LTO
  # NO_RELATIVE_MACRO
  # UNDEF_NDEBUG
  # OPTIMIZATION "s"
  # BUILD_OPT ./build.opt
  # DISABLE_HAL_MODULES ADC I2C RTC SPI TIM DAC EXTI ETH SD QSPI
  # CORE_CALLBACK
)

# STEP 3: configure your sketch
# -----------------------------------------------------------------------------
include(external_library)
# Cannot tell the dependencies of the library ahead-of-time
# Please write them in using the DEPENDS ... clause
# The same directives apply as for `build_sketch()` just below.
# external_library(PATH "${USER_LIBS}/Adafruit_BME280_Library")
# external_library(PATH "${USER_LIBS}/Adafruit_BusIO")
# external_library(PATH "${USER_LIBS}/Adafruit_Circuit_Playground")
# external_library(PATH "${USER_LIBS}/Adafruit_FONA_Library")
# external_library(PATH "${USER_LIBS}/Adafruit_GFX_Library")
# external_library(PATH "${USER_LIBS}/Adafruit_GPS_Library")
# external_library(PATH "${USER_LIBS}/Adafruit_ILI9341")
# external_library(PATH "${USER_LIBS}/Adafruit_IO_Arduino")
# external_library(PATH "${USER_LIBS}/Adafruit_LED_Backpack_Library")
# external_library(PATH "${USER_LIBS}/Adafruit_LIS3DH")
# external_library(PATH "${USER_LIBS}/Adafruit_MQTT_Library")
# external_library(PATH "${USER_LIBS}/Adafruit_NeoPixel")
# external_library(PATH "${USER_LIBS}/Adafruit_SGP30_Sensor")
# external_library(PATH "${USER_LIBS}/Adafruit_Si7021_Library")
# external_library(PATH "${USER_LIBS}/Adafruit_SleepyDog_Library")
# external_library(PATH "${USER_LIBS}/Adafruit_SSD1306")
# external_library(PATH "${USER_LIBS}/Adafruit_STMPE610")
# external_library(PATH "${USER_LIBS}/Adafruit_TouchScreen")
# external_library(PATH "${USER_LIBS}/Adafruit_Unified_Sensor")
# external_library(PATH "${USER_LIBS}/Adafruit_VEML6070_Library")
# external_library(PATH "${USER_LIBS}/Adafruit_Zero_DMA_Library")
# external_library(PATH "${USER_LIBS}/Adafruit_Zero_FFT_Library")
# external_library(PATH "${USER_LIBS}/Adafruit_Zero_PDM_Library")
# external_library(PATH "${USER_LIBS}/Arduino_Low_Power")
# external_library(PATH "${USER_LIBS}/ArduinoHttpClient")
# external_library(PATH "${USER_LIBS}/ArduinoJson")
# external_library(PATH "${USER_LIBS}/AUnit")
# external_library(PATH "${USER_LIBS}/DHT_sensor_library")
# external_library(PATH "${USER_LIBS}/ESP32_Digital_RGB_LED_Drivers")
# external_library(PATH "${USER_LIBS}/ESP32Servo")
# external_library(PATH "${USER_LIBS}/Ethernet")
# external_library(PATH "${USER_LIBS}/Freenove_WS2812_Lib_for_ESP32")
# external_library(PATH "${USER_LIBS}/Freenove_WS2812B_RGBLED_Controller")
# external_library(PATH "${USER_LIBS}/Grove-3-Axis-Digital-Accelerometer-2g-to-16g-LIS3DHTR")
# external_library(PATH "${USER_LIBS}/Grove_-_Barometer_Sensor_BMP280")
# external_library(PATH "${USER_LIBS}/Grove_-_Motor_Driver_TB6612FNG")
# external_library(PATH "${USER_LIBS}/Grove_Ultrasonic_Ranger")
# external_library(PATH "${USER_LIBS}/Keyboard")
# external_library(PATH "${USER_LIBS}/MsTimer2")
# external_library(PATH "${USER_LIBS}/PciManager")
# external_library(PATH "${USER_LIBS}/RTClib")
# external_library(PATH "${USER_LIBS}/RTCZero")
# external_library(PATH "${USER_LIBS}/Servo")
# external_library(PATH "${USER_LIBS}/Simple_FOC")
# external_library(PATH "${USER_LIBS}/SimpleFOCDrivers")
# external_library(PATH "${USER_LIBS}/U8g2")
# external_library(PATH "${USER_LIBS}/WaveHC")
# external_library(PATH "${USER_LIBS}/WiFi101")
# external_library(PATH "${USER_LIBS}/WiFiManager")

add_compile_options( $<$<COMPILE_LANGUAGE:CXX>:-Wno-register> )
include(build_sketch)
build_sketch(TARGET "test"
  SOURCES
  test.ino

  # Uncomment the lines below to bind libraries to your sketch
  # Legitimate names after the DEPENDS keywords are:
  # - libraries declared with external_library
  # - libraries from the libraries/ folder of Arduino_Core_STM32

  # DEPENDS
  # SD
  # Wire
  # SPI
  # USBDevice
  # VirtIO
)

# STEP 4: optional features
# -----------------------------------------------------------------------------

include(insights)
insights(TARGET "test"
  # DIRECT_INCLUDES
  # TRANSITIVE_INCLUDES
  # SYMBOLS
  # ARCHIVES
  # LOGIC_STRUCTURE
)
